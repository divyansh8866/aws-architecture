service: dynamodb-kinesis-s3-processor

provider:
  name: aws
  runtime: python3.8
  region: us-east-1

functions:
  processData:
    handler: handler.process_data
    events:
      - kinesisFirehose:
          stream: { Ref: KinesisDataFirehose }
          batchSize: 1

resources:
  Resources:
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: your-dynamodb-table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    KinesisDataStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: your-kinesis-data-stream
        ShardCount: 1

    KinesisDataFirehose:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: your-kinesis-data-firehose
        DeliveryStreamType: KinesisStreamAsSource
        KinesisStreamSourceConfiguration:
          KinesisStreamARN: { "Fn::GetAtt": [ "KinesisDataStream", "Arn" ] }
          RoleARN: { "Fn::GetAtt": [ "KinesisFirehoseRole", "Arn" ] }
        ExtendedS3DestinationConfiguration:
          BucketARN: { "Fn::GetAtt": [ "S3Bucket", "Arn" ] }
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 5
          CompressionFormat: GZIP
          RoleARN: { "Fn::GetAtt": [ "KinesisFirehoseRole", "Arn" ] }

    KinesisFirehoseRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: firehose.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: KinesisFirehosePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - kinesis:GetShardIterator
                    - kinesis:GetRecords
                    - kinesis:DescribeStream
                    - kinesis:ListStreams
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:AbortMultipartUpload
                    - s3:ListBucketMultipartUploads
                    - s3:ListBucket
                    - s3:GetObject
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: { "Fn::GetAtt": [ "ProcessDataFunction", "Arn" ] }

    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: your-s3-bucket

  Outputs:
    DynamoDBTableArn:
      Description: "ARN of the DynamoDB table"
      Value: { "Fn::GetAtt": [ "DynamoDBTable", "Arn" ] }
    KinesisDataStreamArn:
      Description: "ARN of the Kinesis Data Stream"
      Value: { "Fn::GetAtt": [ "KinesisDataStream", "Arn" ] }
    KinesisDataFirehoseArn:
      Description: "ARN of the Kinesis Data Firehose"
      Value: { "Fn::GetAtt": [ "KinesisDataFirehose", "Arn" ] }
    S3BucketArn:
      Description: "ARN of the S3 bucket"
      Value: { "Fn::GetAtt": [ "S3Bucket", "Arn" ] }
